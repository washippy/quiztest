package {	import flash.events.*;	import flash.display.*;	import flash.filters.ColorMatrixFilter;	import flash.geom.*;	import ColorMatrix;	import flash.display.SimpleButton;	import XMLParser;	import flash.utils.Timer;	import flash.events.TimerEvent;	import TimeLineEvent;//	import PrintME;    import flash.printing.PrintJob;    import flash.printing.PrintJobOrientation;  	import flash.printing.PrintJobOptions;	import com.omniture.ActionSource;	/*		Revisions below ...	XX1) background - make sure it moves while game is playing	2) Animation  - from the initial stage of the	XX3) Disclaimer - increase font	XX4) Intro copy - creative to supply revised copy	WAIT5) Sound - alternative options	6) Incorrect answer - adjust creative for incorrect answer	7) METRICS	8) PRINT	9) SHUFFLE AFTER 3		METRIX	flmc: finance tools: wheel game: start	flmc: finance tools: wheel game: question: <question>	flmc: finance tools: wheel game: thank you	flmc: finance tools: wheel game: thank you: print		*/	public class CreditTest extends MovieClip {		private var QUIZ:Quiz;		private var FADEBLOCK:fadeblock;		private var SPINNER:spinner;		private var SHIFTER:shifter;		private var PRINTSCREEN:printscreen;			//	private var pj:PrintME;		private var options:PrintJobOptions = new PrintJobOptions();        		private var BACKGROUND:bkg;		private var BACKGROUND2:bkg2;		private var rightMatrix:ColorMatrix;		private var myTimer:Timer;		private var XMLparser:XMLParser;		private var dataChunk:XML;		private var counter:Number=1;		private var counterholder:Number=1;		private var rotCounter:Number=0;		private var hitters:Array;		//private var BEEP:beep;		private var shapeOver:Number=1;		private var SPIN_ARRAY:Array= new Array();		private var QUIZ_ARRAY:Array= new Array();		private var quizNumber:Number=1;// how many times they take the quiz ... reload data after 2		private var spinNumber:Number=0;// of 12		private var spinToThis:Number=0;// actual topic number targeted from spin >> shuffled spin array		private var greenNum:Number=.917;// green		private var orangeNum:Number=.928;// orange		private var purpleNum:Number=.937;// purple		private var redNum:Number=.9445;// red		private var yellowNum:Number=.95;// yellow		private var blueNum:Number=.9545;// blue		private var stopHere:Number;		private var overColor:Number=0xFFFFFF;		private var normalColor:Number=0x666666;		private var endScreen:endscreen;		private var intro:introclip;				private var s:ActionSource;		public function CreditTest() {			XMLparser=new XMLParser  ;			XMLparser.doIt("xml/credittestdata.xml");// PULL THIS OUT			XMLparser.addEventListener(XMLParser.DATA_READY, getDataPlease);			// BKG setup			BACKGROUND = new bkg();			addChild(BACKGROUND);			rightMatrix = new ColorMatrix();			startcounter();			//BACKGROUND2 = new bkg2();			//addChild(BACKGROUND2);			//rightMatrix = new ColorMatrix();			//startcounter();			PRINTSCREEN = new printscreen();			//BEEP = new beep();			SPINNER = new spinner();			QUIZ = new Quiz();			FADEBLOCK= new fadeblock();			SHIFTER = new shifter();						addEventListener(TimeLineEvent.RESETME, resetWheelEvent);			addEventListener(TimeLineEvent.RESETSPIN, resetSpinButton);			addEventListener(TimeLineEvent.ANIMDONE, animDone);			addEventListener(TimeLineEvent.MC, trackMC);			addEventListener(TimeLineEvent.TF, trackTF);						configActionSource();					}		public function configActionSource() {			s = new ActionSource();			/* Specify the Report Suite ID(s) to track here */			s.account = "fmccreditfcprod";			/* You may add or alter any code config here */			s.pageName = "";			s.pageURL = "";			s.charSet = "UTF-8";			s.currencyCode = "USD";			/* Turn on and configure ClickMap tracking here */			s.trackClickMap = true;			s.movieID = "";			/* Turn on and configure debugging here */			s.debugTracking = true;			s.trackLocal = true;			/* WARNING: Changing any of the below variables will cause drastic changes			to how your visitor data is collected.  Changes should only be made			when instructed to do so by your account manager.*/			s.trackingServer = "metrics.ford.com";			s.trackingServerSecure = "ìsmetrics.ford.com";			s.visitorNamespace = "ford";			//addChild(s);		}				public function trackMC(e:Event) {			trace("MC SUCCESS :::::::::::: "+e.target +" :: "+ QUIZ.currentquestion)		}				public function trackTF(e:Event) {			trace("TF SUCCESS :::::::::::: "+e.target +" :: "+ QUIZ.currentquestion)					}				private function getDataPlease(e:Event):void {			dataChunk=e.target.getIt();			//trace("GETTING DATA ");//+dataChunk)			buildQuiz();			fireUpIntro();		}		private function fireUpIntro():void {			// bring in intro clip			intro = new introclip();			intro.x=101.8;			intro.y=29.6;			intro.startbutton.textHolder.introtitle_tf.text=dataChunk.copy.title;			intro.startbutton.textHolder.introcopy_tf.htmlText=dataChunk.copy.body;			intro.startbutton.textHolder.introcta_tf.text=dataChunk.copy.cta;			intro.startbutton.textHolder.introtitle_tf.mouseEnabled =  false;			intro.startbutton.textHolder.introcopy_tf.mouseEnabled =  false;			intro.startbutton.textHolder.introcta_tf.mouseEnabled =  false;			intro.startbutton.buttonMode=true;			intro.startbutton.addEventListener(MouseEvent.CLICK, clickHandler);			intro.startbutton.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);			intro.startbutton.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);			intro.startbutton.mouseChildren=false;			addChild(intro);		}		private function removeIntroEvents():void {			intro.startbutton.removeEventListener(MouseEvent.CLICK, clickHandler);			intro.startbutton.removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);			intro.startbutton.removeEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);		}		private function clickHandler(e:Event):void {			//trace(e.target);			e.target.parent.gotoAndPlay("OUT");			// METRIC EVENT flmc: finance tools: wheel game: start		     s.track({pageName:"flmc:finance_tools:wheel_game:start"});			trace("START QUIZ METRIC ::::::::::::::")						removeIntroEvents();			launchShifter();		}		private function mouseOutHandler(e:Event):void {			e.target.gotoAndPlay("off");			e.target.textHolder.introcta_tf.textColor=normalColor;		}		private function mouseOverHandler(e:Event):void {			e.target.gotoAndPlay("over");			e.target.textHolder.introcta_tf.textColor=overColor;		}		private function startcounter():void {			myTimer=new Timer(50);			myTimer.addEventListener("timer", timerHandler);			myTimer.start();		}		private function timerHandler(event:TimerEvent):void {			//trace("." + myTimer.currentCount)			rightMatrix.rotateHue(5);			BACKGROUND.filters=[rightMatrix.filter];		}		private function startQuiz():void {			QUIZ.fireitUP(quizNumber, spinNumber, spinToThis);		}		private function launchShifter():void {			trace("SHIFTER");			addChild(SHIFTER);			SHIFTER.gotoAndPlay(2);		}		private function animDone(e:Event):void {			launchSpinner();		}		private function launchSpinner():void {			trace("NO WAY");			addChild(SPINNER);			removeChild(SHIFTER);			SPINNER.gotoAndPlay(2);						SPINNER.spinbutton.cta2_tf.text =dataChunk.copy.cta2;					addChild(FADEBLOCK);			FADEBLOCK.mouseEnabled=false;			addChild(QUIZ);			addSpinnerEvents();		}		public function resetWheelEvent(e:Event):void {			resetWheel();		}		public function resetWheel():void {			if (spinNumber>=12) {				SPINNER.progressbar.gotoAndStop(13);							launchEnd();				return;			}			trace("RESET WHEEL : QN "+quizNumber);			if(quizNumber>=2){				quizNumber=0;				reBuildQuiz();			}						counter=1;			counterholder=1;			rotCounter=0;			SPINNER.wheel.rotation=0;			SPINNER.arrow.gotoAndStop("off");			FADEBLOCK.gotoAndPlay("goaway");			addSpinnerEvents();			//spinNumberManager();			SPINNER.progressbar.gotoAndStop(spinNumber+1);		}		private function launchEnd():void {			//  trace("ENDING NOW THANKS");			endScreen = new endscreen();			//endScreen.x=101.8;			//endScreen.y=29.6;			endScreen.textHolder.endtitle_tf.text=dataChunk.copy.endtitle;			endScreen.textHolder.endcopy_tf.htmlText=dataChunk.copy.endcopy;			endScreen.printButton.addEventListener(MouseEvent.CLICK, printHandler);			endScreen.playagainButton.addEventListener(MouseEvent.CLICK, playagainHandler);			//endScreen.printButton.mouseChildren = false;			//en//dScreen.playagainButton.mouseChildren = false;			addChild(endScreen);						// METRIC EVENT flmc: finance tools: wheel game: thank you			 s.track({pageName:"flmc:finance_tools:wheel_game:thank_you"});				}		private function printHandler(e:Event):void {			trace("PRINT");		//	pj = new PrintME();			printOne();		}				 private function printOne():void {							// METRIC EVENT flmc: finance tools: wheel game: thank you: print				 s.track({pageName:"flmc:finance_tools:wheel_game:thank_you:print"});				            var pj:PrintJob = new PrintJob();				options.printAsBitmap = true;		            var pagesToPrint:uint = 0;	            if(pj.start()) {                	                if(pj.orientation == PrintJobOrientation.LANDSCAPE) {    	                    throw new Error("Without embedding fonts you must print one sheet per page with an orientation of portrait.");	                }	             	                try {						//pj.addPage(PRINTSCREEN,null,options);	                   pj.addPage(this,null,options,9);						//	addPage(sprite:Sprite, printArea:Rectangle = null, options:PrintJobOptions = null, frameNum:int = 0):void						pagesToPrint++;	                }	                catch(e:Error) {	                    // do nothing	                }	                if(pagesToPrint > 0) {	                    pj.send();	                }	            }	        }						private function playagainHandler(e:Event):void {			//  trace("PLAY AGAIN");			playAgain();		}		private function playAgain():void {			quizNumber++;			spinNumber=0;			removeChild(endScreen);			resetWheel();			// METRIC EVENT flmc: finance tools: wheel game: start			 s.track({pageName:"flmc:finance_tools:wheel_game:start"});					}		private function addSpinnerEvents():void {			SPINNER.wheel.mouseEnabled=false;			SPINNER.spinbutton.addEventListener(MouseEvent.CLICK, spinHandler, false, 0, true);			SPINNER.spinbutton.addEventListener(MouseEvent.MOUSE_OUT, spinMouseOutHandler);			SPINNER.spinbutton.addEventListener(MouseEvent.MOUSE_OVER, spinMouseOverHandler);			SPINNER.spinbutton.cta2_tf.mouseEnabled = false;						SPINNER.spinbutton.mouseChildren=false;			SPINNER.spinbutton.buttonMode=true;		}		private function killSpinnerEvents():void {			SPINNER.spinbutton.removeEventListener(MouseEvent.CLICK, spinHandler);			SPINNER.spinbutton.removeEventListener(MouseEvent.MOUSE_OUT, spinMouseOutHandler);			SPINNER.spinbutton.removeEventListener(MouseEvent.MOUSE_OVER, spinMouseOverHandler);		}		private function spinHandler(e:Event):void {				killSpinnerEvents();			//trace(e.target);			e.target.parent.gotoAndPlay("out");			// send in variable 			spinNumberManager();			addEventListener(Event.ENTER_FRAME, spinItUp);				}		private function spinNumberManager():void {			if (spinNumber>=12) {				spinNumber=0;				//  trace("END THE QUIZ NOW PLEEZE")			} else {				spinNumber++;			}			//  trace("NEW SPIN NUMBER IS :: "+spinNumber)		}		private function spinMouseOutHandler(e:Event):void {			trace("SPIN MOUSE OUT H "+ e.target.name)			e.target.gotoAndPlay("out");			e.target.cta2_tf.textColor=normalColor;		}		private function resetSpinButton(e:Event):void {			SPINNER.spinbutton.gotoAndPlay("out");			SPINNER.spinbutton.cta2_tf.textColor=normalColor;			SPINNER.spinbutton.cta2_tf.mouseEnabled = false;					}		private function spinMouseOverHandler(e:Event):void {			e.target.gotoAndPlay("over");			e.target.cta2_tf.textColor=overColor;		}		private function beepHitCheck(e:Event):void {			//var hitcheck:Boolean = SPINNER.wheel.hitarea.hitTestPoint(210, 0) 			for (var i=1; i<=12; i++) {				var hitcheck:Boolean=SPINNER.wheel["hitarea"+i].hitTestObject(SPINNER.arrow.hitarea);				if (hitcheck) {					SPINNER.arrow.gotoAndPlay("on");					//trace("HIT CHECK "+i +" :: "+hitcheck);				}			}		}		private function spinItUp(e:Event):void {			addEventListener(Event.ENTER_FRAME, beepHitCheck);			if (counter<15) {				counter=counterholder*1.05;			} else {				counter=15;				rotCounter++;			}			e.target.SPINNER.wheel.rotation+=counter;			counterholder=counter;			if (rotCounter>30) {				removeEventListener(Event.ENTER_FRAME, spinItUp);				rotCounter=0;				EFspinIt();			}		}		private function EFspinIt():void {			addEventListener(Event.ENTER_FRAME, spinIt);			rotCounter=0;		}		private function spinIt(e:Event):void {			e.target.SPINNER.wheel.rotation+=15;			rotCounter++;			if (rotCounter>=4) {				removeEventListener(Event.ENTER_FRAME, spinIt);				counter=15;				counterholder=15;				addEventListener(Event.ENTER_FRAME, spinItDown);			}		}		private function spinItDown(e:Event):void {			//  trace("SPIN # "+ spinNumber);			spinToThis = SPIN_ARRAY[(spinNumber-1)].num;									// force a color			//spinToThis =6;									//  trace("SPIN TO THIS "+ spinToThis);			switch (spinToThis) {				case 1 :				case 7 :					stopHere=orangeNum;					break;				case 2 :				case 8 :					stopHere=blueNum;					break;				case 3 :				case 9 :					stopHere=redNum;					break;				case 4 :				case 10 :					stopHere=yellowNum;					break;				case 5 :				case 11 :					stopHere=purpleNum;					break;				case 6 :				case 12 :					stopHere=greenNum;					break;			}			if (counter>0.04) {				counter=counterholder*stopHere;			} else {				// SPIN IS DONE ... FLIP IT 				counter=0;				killSpinEvents();				SPINNER.arrow.gotoAndStop("on");				FADEBLOCK.gotoAndPlay("go");				startQuiz();			}			e.target.SPINNER.wheel.rotation+=counter;			counterholder=counter;			//trace("spindown counter"+counter)		}		private function killSpinEvents():void {			//trace("kill");			removeEventListener(Event.ENTER_FRAME, spinItDown);			removeEventListener(Event.ENTER_FRAME, beepHitCheck);		}		private function traceEM(element:*, index:int, arr:Array):void {			//  trace(index + " TRACEEM ::"+element);		}		private function traceMe(obj:Object):void {			for (var item in obj) {				for (var stuff in obj[item]) {					for (var junk in obj[item][stuff]) {						trace("OBJ TRACE >>> "+item +"::"+stuff + "::"+junk+  "::"+obj[item][stuff][junk]);					}				}			}		}		private function traceArr(Arr:Array):void {			trace("WHUT?");			for (var aa=0; aa<Arr.length; aa++) {				for (var bb=0; bb<Arr[aa].length; bb++) {					trace("QUIZ ARR > topic:"+aa +"   question[shuffled]:"+bb + " value:" +Arr[aa][bb]);				}			}		}		private function buildQuiz():void {			//trace("BUILD QUIZ");			// SPIN_ARRAY is a shuffled array of 12 spins, 2 each color			var topicLen:int=dataChunk.child("topic").length();			//  trace(topicLen+"  <> "+dataChunk.topic[0].@title)			for (var i = 0; i < topicLen; i++) {				SPIN_ARRAY.push({title:dataChunk.topic[i].@title, num:i+1});			}			for (var k = 0; k < topicLen; k++) {				SPIN_ARRAY.push({title:dataChunk.topic[k].@title, num:(k+topicLen+1)});// HARD CODED VALUE ****  ALERT ALERT *****			}			// trace("SPIN ARR--------------");			//  trace(SPIN_ARRAY[0].num);			SPIN_ARRAY.shuffle();			//  trace(SPIN_ARRAY[0].num);		 	traceMe(SPIN_ARRAY)			//QUIZ is a shuffled array of question numbers :: a map of quiz choices if you will			//  trace("TOPICLEN "+topicLen)			var choiceArr:Array = new Array();			var questionArr:Array = new Array();			for (var j = 0; j < topicLen; j++) {				//var qItems:XMLList = dataChunk.topic[j].question;				var qLen=dataChunk.topic[j].child("question").length();//qItems.length;   				//  trace("QLEN     "+qLen)				questionArr=[];				for (var l = 0; l< qLen; l++) {					//var cItems:XMLList = dataChunk.topic[j].question[l].choice;					//var cLen = dataChunk.topic[j].question[l].child("choice").length()//cItems.length;					//trace("CLEN          "+cLen)					//choiceArr = [];					//for(var m = 0; m< cLen; m++){					//choiceArr[m] = m+1;					//}					questionArr[l]=l+1;//choiceArr;				}				questionArr.shuffle();				QUIZ_ARRAY[j]=questionArr;				//  trace("HUH")			}			//  traceArr(QUIZ_ARRAY)			QUIZ.dataObj=dataChunk;			QUIZ.QUIZ_ARRAY=QUIZ_ARRAY;		}				private function reBuildQuiz():void {			trace("RE BUILD QUIZ");			QUIZ_ARRAY=[];			QUIZ.QUIZ_ARRAY=[];						var topicLen:int=dataChunk.child("topic").length();					SPIN_ARRAY.shuffle();			traceMe(SPIN_ARRAY);		 				var choiceArr:Array = new Array();			var questionArr:Array = new Array();			for (var j = 0; j < topicLen; j++) {				var qLen=dataChunk.topic[j].child("question").length();				questionArr=[];				for (var l = 0; l< qLen; l++) {					questionArr[l]=l+1;				}				questionArr.shuffle();				QUIZ_ARRAY[j]=questionArr;			}			QUIZ.QUIZ_ARRAY=QUIZ_ARRAY;		}		Array.prototype.shuffle = function(){		//  trace("SHUFFLE")				for(var i = 0; i < this.length; i++){		var a = this[i];		var b = Math.floor(Math.random() * this.length);		this[i] = this[b];		this[b] = a;		}		}						;	}}